import { Context, type Schema } from '@/generated';
import { writeFile } from 'fs/promises';
import { Address, Hex, keccak256 } from 'viem';
import { metadataService, pathsService } from '.';
import { Grid, Point } from '../utilities/grid';

enum BrickShape {
    I,
    J,
    L,
    O,
    S,
    T,
    Z,
}

const BrickShapePoints: Record<BrickShape, Point[]> = {
    [BrickShape.I]: [
        { x: 0, y: 0 },
        { x: 1, y: 0 },
        { x: 2, y: 0 },
        { x: 3, y: 0 },
    ],
    [BrickShape.J]: [
        { x: 0, y: 0 },
        { x: 0, y: 1 },
        { x: 1, y: 1 },
        { x: 2, y: 1 },
    ],
    [BrickShape.L]: [
        { x: 2, y: 0 },
        { x: 0, y: 1 },
        { x: 1, y: 1 },
        { x: 2, y: 1 },
    ],
    [BrickShape.O]: [
        { x: 0, y: 0 },
        { x: 1, y: 0 },
        { x: 0, y: 1 },
        { x: 1, y: 1 },
    ],
    [BrickShape.S]: [
        { x: 1, y: 0 },
        { x: 2, y: 0 },
        { x: 0, y: 1 },
        { x: 1, y: 1 },
    ],
    [BrickShape.T]: [
        { x: 1, y: 0 },
        { x: 0, y: 1 },
        { x: 1, y: 1 },
        { x: 2, y: 1 },
    ],
    [BrickShape.Z]: [
        { x: 0, y: 0 },
        { x: 1, y: 0 },
        { x: 1, y: 1 },
        { x: 2, y: 1 },
    ],
};

type Fragment = Schema['Fragment'];
export class BrickService {
    cellSize: number = 20;
    outerPadding: number = 5; // number of cells to pad around the canvas
    brickCount: number = 0;
    grid: Grid = new Grid();
    constructor() {}

    generateBrick(address: Address, ownedCount: number): [string, string] {
        const base = keccak256((address + ownedCount.toString()) as Hex).substring(2, 42);
        const hash1 = parseInt(base.substring(0, 10), 16);
        const hash2 = parseInt(base.substring(10, 20), 16);
        const hash3 = parseInt(base.substring(20, 30), 16);
        const hash4 = parseInt(base.substring(30), 16) % 7;

        const shape = BrickShape[hash4] || BrickShape[BrickShape.I];
        const color = `hsl(${hash1 % 360}deg, ${60 + (hash2 % 40)}%, ${30 + (hash3 % 55)}%)`;

        return [color, shape];
    }

    drawBrickSVG(brick: Fragment) {
        const thumbCellSize = 200;
        const brickShape = BrickShape[brick.decorator2 as keyof typeof BrickShape];
        const brickPoints = BrickShapePoints[brickShape];

        const rects = brickPoints.map((point) => {
            const x = point.x * thumbCellSize;
            const y = point.y * thumbCellSize;
            return `<rect x="${x}" y="${y}" width="${thumbCellSize}" height="${thumbCellSize}" rx="20" stroke="#080A0F" stroke-width="20" fill="${brick.decorator1}" />`;
        });
        const width = Math.max(...brickPoints.map((p) => p.x)) * thumbCellSize + thumbCellSize;
        const height = Math.max(...brickPoints.map((p) => p.y)) * thumbCellSize + thumbCellSize;

        const rectsSvg = `
            <svg
                xmlns="http://www.w3.org/2000/svg" 
                x="${(1000 - width) / 2}" 
                y="${(1000 - height) / 2}" 
                width="${width}" 
                height="${height}" 
                viewBox="0 0 ${width} ${height}">
                ${rects.join('\n')}
            </svg>`;
        return `
            <svg width="1000" height="1000" viewBox="0 0 1000 1000" fill="none" xmlns="http://www.w3.org/2000/svg">
                <style type="text/css">
                    @font-face {
                        font-family: 'JetBrains Mono';
                        src: url(data:application/font-woff;charset=utf-8;base64,) format('woff');
                        font-weight: 400;
                        font-style: normal;
                    }
                </style>
                <rect width="1000" height="1000" fill="#020617"/>
                <path d="M47.708 954V927.72H54.764C57.02 927.72 58.808 928.332 60.128 929.556C61.472 930.756 62.144 932.4 62.144 934.488C62.144 935.712 61.904 936.78 61.424 937.692C60.944 938.604 60.26 939.312 59.372 939.816C58.508 940.32 57.464 940.572 56.24 940.572V940.14C57.584 940.116 58.736 940.38 59.696 940.932C60.68 941.46 61.436 942.228 61.964 943.236C62.516 944.22 62.792 945.396 62.792 946.764C62.792 948.228 62.48 949.512 61.856 950.616C61.232 951.696 60.332 952.536 59.156 953.136C58.004 953.712 56.636 954 55.052 954H47.708ZM50.048 951.84H54.908C56.612 951.84 57.956 951.384 58.94 950.472C59.924 949.56 60.416 948.312 60.416 946.728C60.416 945.144 59.924 943.872 58.94 942.912C57.956 941.952 56.612 941.472 54.908 941.472H50.048V951.84ZM50.048 939.384H54.728C56.312 939.384 57.548 938.964 58.436 938.124C59.324 937.26 59.768 936.096 59.768 934.632C59.768 933.144 59.324 931.98 58.436 931.14C57.548 930.3 56.324 929.88 54.764 929.88H50.048V939.384ZM74.6939 954V927.72H82.3619C83.9219 927.72 85.2779 928.032 86.4299 928.656C87.5819 929.256 88.4699 930.108 89.0939 931.212C89.7179 932.316 90.0299 933.612 90.0299 935.1C90.0299 936.948 89.5259 938.508 88.5179 939.78C87.5099 941.052 86.1299 941.868 84.3779 942.228L90.2819 954H87.4739L81.8939 942.408H77.0699V954H74.6939ZM77.0699 940.284H82.3619C83.9459 940.284 85.2179 939.804 86.1779 938.844C87.1379 937.884 87.6179 936.624 87.6179 935.064C87.6179 933.48 87.1379 932.22 86.1779 931.284C85.2179 930.348 83.9459 929.88 82.3619 929.88H77.0699V940.284ZM102.076 954V951.84H107.584V929.88H102.076V927.684H115.468V929.88H109.996V951.84H115.468V954H102.076ZM135.938 954.36C134.426 954.36 133.106 954.06 131.978 953.46C130.874 952.86 130.01 952.008 129.386 950.904C128.786 949.8 128.486 948.504 128.486 947.016V934.704C128.486 933.192 128.786 931.884 129.386 930.78C130.01 929.676 130.874 928.836 131.978 928.26C133.106 927.66 134.426 927.36 135.938 927.36C137.474 927.36 138.794 927.672 139.898 928.296C141.026 928.92 141.89 929.796 142.49 930.924C143.114 932.052 143.426 933.384 143.426 934.92H141.05C141.05 933.216 140.594 931.884 139.682 930.924C138.77 929.964 137.522 929.484 135.938 929.484C134.378 929.484 133.142 929.952 132.23 930.888C131.318 931.8 130.862 933.072 130.862 934.704V947.016C130.862 948.648 131.318 949.932 132.23 950.868C133.142 951.78 134.378 952.236 135.938 952.236C137.546 952.236 138.794 951.756 139.682 950.796C140.594 949.812 141.05 948.48 141.05 946.8H143.426C143.426 948.336 143.114 949.668 142.49 950.796C141.89 951.924 141.026 952.8 139.898 953.424C138.794 954.048 137.474 954.36 135.938 954.36ZM155.652 954V927.684H158.028V939.348H162.888L168.72 927.684H171.312L164.976 940.32L171.672 954H168.9L162.816 941.436H158.028V954H155.652ZM209.588 954V927.72H212.792L221.792 951.3C221.744 950.772 221.696 950.16 221.648 949.464C221.624 948.768 221.6 948.084 221.576 947.412C221.552 946.74 221.54 946.176 221.54 945.72V927.72H223.844V954H220.64L211.712 930.42C211.736 930.78 211.76 931.26 211.784 931.86C211.808 932.46 211.832 933.12 211.856 933.84C211.88 934.56 211.892 935.28 211.892 936V954H209.588ZM243.702 954.36C242.214 954.36 240.918 954.072 239.814 953.496C238.734 952.896 237.894 952.044 237.294 950.94C236.718 949.836 236.43 948.528 236.43 947.016V934.704C236.43 933.192 236.718 931.896 237.294 930.816C237.894 929.712 238.734 928.86 239.814 928.26C240.918 927.66 242.214 927.36 243.702 927.36C245.19 927.36 246.474 927.66 247.554 928.26C248.658 928.86 249.498 929.712 250.074 930.816C250.674 931.896 250.974 933.192 250.974 934.704V947.016C250.974 948.528 250.674 949.836 250.074 950.94C249.498 952.044 248.658 952.896 247.554 953.496C246.474 954.072 245.19 954.36 243.702 954.36ZM243.702 952.236C245.262 952.236 246.462 951.78 247.302 950.868C248.166 949.956 248.598 948.672 248.598 947.016V934.704C248.598 933.048 248.166 931.764 247.302 930.852C246.438 929.94 245.238 929.484 243.702 929.484C242.166 929.484 240.966 929.94 240.102 930.852C239.238 931.764 238.806 933.048 238.806 934.704V947.016C238.806 948.672 239.226 949.956 240.066 950.868C240.93 951.78 242.142 952.236 243.702 952.236ZM270.687 954.36C269.823 954.36 269.139 954.108 268.635 953.604C268.155 953.1 267.915 952.428 267.915 951.588C267.915 950.724 268.155 950.04 268.635 949.536C269.139 949.032 269.823 948.78 270.687 948.78C271.551 948.78 272.223 949.032 272.703 949.536C273.207 950.04 273.459 950.724 273.459 951.588C273.459 952.428 273.207 953.1 272.703 953.604C272.223 954.108 271.551 954.36 270.687 954.36Z" fill="${
                    brick.decorator1
                }"/>
                <path d="M684.79 98V51.28H696.822C700.705 51.28 703.798 52.368 706.102 54.544C708.449 56.72 709.622 59.6427 709.622 63.312C709.622 65.488 709.195 67.408 708.342 69.072C707.531 70.736 706.379 72.0373 704.886 72.976C703.393 73.872 701.601 74.32 699.51 74.32V73.68C701.814 73.68 703.798 74.1493 705.462 75.088C707.169 76.0267 708.47 77.3707 709.366 79.12C710.305 80.8267 710.774 82.8533 710.774 85.2C710.774 87.8027 710.219 90.064 709.11 91.984C708.001 93.904 706.401 95.3973 704.31 96.464C702.262 97.488 699.83 98 697.014 98H684.79ZM687.99 95.056H697.014C700.299 95.056 702.881 94.1813 704.758 92.432C706.635 90.6827 707.574 88.2933 707.574 85.264C707.574 82.2347 706.635 79.8453 704.758 78.096C702.881 76.304 700.299 75.408 697.014 75.408H687.99V95.056ZM687.99 72.528H696.822C699.851 72.528 702.198 71.7173 703.862 70.096C705.569 68.4747 706.422 66.2347 706.422 63.376C706.422 60.5173 705.569 58.2773 703.862 56.656C702.155 55.0347 699.809 54.224 696.822 54.224H687.99V72.528ZM732.765 98V51.28H745.885C748.658 51.28 751.048 51.8133 753.053 52.88C755.058 53.904 756.594 55.3973 757.661 57.36C758.77 59.28 759.325 61.5627 759.325 64.208C759.325 67.5787 758.365 70.3947 756.445 72.656C754.568 74.9173 751.986 76.2827 748.701 76.752L759.645 98H755.805L745.245 76.88H735.965V98H732.765ZM735.965 74H745.885C749 74 751.474 73.104 753.309 71.312C755.186 69.4773 756.125 67.0667 756.125 64.08C756.125 61.0507 755.186 58.6613 753.309 56.912C751.474 55.12 749 54.224 745.885 54.224H735.965V74ZM781.38 98V95.056H791.364V54.16H781.38V51.216H804.42V54.16H794.564V95.056H804.42V98H781.38ZM841.259 98.64C838.656 98.64 836.395 98.1067 834.475 97.04C832.555 95.9733 831.062 94.48 829.995 92.56C828.928 90.64 828.395 88.4 828.395 85.84V63.44C828.395 60.8373 828.928 58.576 829.995 56.656C831.062 54.736 832.555 53.264 834.475 52.24C836.395 51.1733 838.656 50.64 841.259 50.64C843.904 50.64 846.208 51.1947 848.171 52.304C850.134 53.4133 851.648 54.9707 852.715 56.976C853.782 58.9813 854.315 61.3493 854.315 64.08H851.115C851.115 60.7947 850.219 58.2133 848.427 56.336C846.678 54.4587 844.288 53.52 841.259 53.52C838.272 53.52 835.904 54.416 834.155 56.208C832.448 57.9573 831.595 60.368 831.595 63.44V85.84C831.595 88.912 832.448 91.344 834.155 93.136C835.904 94.8853 838.272 95.76 841.259 95.76C844.331 95.76 846.742 94.8213 848.491 92.944C850.24 91.024 851.115 88.4427 851.115 85.2H854.315C854.315 87.9307 853.782 90.2987 852.715 92.304C851.648 94.3093 850.134 95.8667 848.171 96.976C846.208 98.0853 843.904 98.64 841.259 98.64ZM876.69 98V51.216H879.89V72.336H889.682L900.05 51.216H903.57L892.562 73.616L904.21 98H900.434L889.618 75.216H879.89V98H876.69ZM937.145 98.64C934.286 98.64 931.79 98.128 929.657 97.104C927.566 96.08 925.945 94.6293 924.793 92.752C923.641 90.8747 923.065 88.6773 923.065 86.16H926.265C926.265 89.0613 927.246 91.3867 929.209 93.136C931.214 94.8853 933.86 95.76 937.145 95.76C940.345 95.76 942.841 94.9707 944.633 93.392C946.468 91.7707 947.385 89.5307 947.385 86.672C947.385 84.1973 946.681 82.0427 945.273 80.208C943.865 78.3733 941.945 77.0933 939.513 76.368L934.137 74.768C931.065 73.8293 928.654 72.272 926.905 70.096C925.198 67.8773 924.345 65.2533 924.345 62.224C924.345 59.8347 924.857 57.7867 925.881 56.08C926.948 54.3307 928.441 52.9867 930.361 52.048C932.324 51.1093 934.606 50.64 937.209 50.64C941.134 50.64 944.228 51.7493 946.489 53.968C948.793 56.144 949.945 59.1307 949.945 62.928H946.745C946.745 60.0693 945.87 57.7867 944.121 56.08C942.372 54.3733 940.046 53.52 937.145 53.52C934.158 53.52 931.812 54.2667 930.105 55.76C928.398 57.2533 927.545 59.3227 927.545 61.968C927.545 64.272 928.206 66.2987 929.529 68.048C930.852 69.7547 932.644 70.9707 934.905 71.696L940.281 73.36C943.438 74.3413 945.934 76.0053 947.769 78.352C949.646 80.6987 950.585 83.408 950.585 86.48C950.585 88.9547 950.03 91.1093 948.921 92.944C947.854 94.736 946.318 96.144 944.313 97.168C942.308 98.1493 939.918 98.64 937.145 98.64Z" fill="${
                    brick.decorator1
                }"/>
                <path d="M63.52 99.64C60.3627 99.64 57.6107 99.064 55.264 97.912C52.9173 96.7173 51.0827 95.0747 49.76 92.984C48.48 90.8507 47.84 88.376 47.84 85.56V65.72C47.84 62.8613 48.48 60.3867 49.76 58.296C51.0827 56.2053 52.9173 54.584 55.264 53.432C57.6107 52.2373 60.3627 51.64 63.52 51.64C66.6347 51.64 69.344 52.2373 71.648 53.432C73.9947 54.584 75.808 56.2053 77.088 58.296C78.4107 60.3867 79.072 62.8613 79.072 65.72H69.472C69.472 63.8427 68.9387 62.4133 67.872 61.432C66.848 60.4507 65.376 59.96 63.456 59.96C61.536 59.96 60.0427 60.4507 58.976 61.432C57.952 62.4133 57.44 63.8427 57.44 65.72V85.56C57.44 87.3947 57.952 88.824 58.976 89.848C60.0427 90.8293 61.536 91.32 63.456 91.32C65.376 91.32 66.848 90.8293 67.872 89.848C68.9387 88.824 69.472 87.3947 69.472 85.56H79.072C79.072 88.376 78.4107 90.8507 77.088 92.984C75.808 95.0747 73.9947 96.7173 71.648 97.912C69.344 99.064 66.6347 99.64 63.52 99.64ZM93.575 99L105.031 52.28H117.191L128.775 99H118.983L116.743 88.44H105.607L103.367 99H93.575ZM107.207 80.76H115.079L112.839 69.496C112.54 67.8747 112.22 66.2747 111.879 64.696C111.58 63.0747 111.346 61.816 111.175 60.92C111.004 61.816 110.77 63.0533 110.471 64.632C110.215 66.2107 109.916 67.8107 109.575 69.432L107.207 80.76ZM143.79 99V52.28H154.99L167.086 88.44C166.958 86.8613 166.809 85.048 166.638 83C166.467 80.9093 166.318 78.84 166.19 76.792C166.105 74.7013 166.062 72.9307 166.062 71.48V52.28H174.51V99H163.31L151.342 62.84C151.47 64.2053 151.598 65.8267 151.726 67.704C151.854 69.5813 151.961 71.48 152.046 73.4C152.174 75.32 152.238 77.0267 152.238 78.52V99H143.79ZM201.109 99L189.525 52.28H199.445L205.909 81.784C206.122 82.808 206.378 84.1093 206.677 85.688C207.018 87.2667 207.274 88.6107 207.445 89.72C207.616 88.6107 207.829 87.2667 208.085 85.688C208.341 84.1093 208.576 82.7867 208.789 81.72L215.061 52.28H224.725L213.269 99H201.109ZM237.5 99L248.956 52.28H261.116L272.7 99H262.908L260.668 88.44H249.532L247.292 99H237.5ZM251.132 80.76H259.004L256.764 69.496C256.465 67.8747 256.145 66.2747 255.804 64.696C255.505 63.0747 255.271 61.816 255.1 60.92C254.929 61.816 254.695 63.0533 254.396 64.632C254.14 66.2107 253.841 67.8107 253.5 69.432L251.132 80.76ZM303.075 99.64C299.79 99.64 296.931 99.0853 294.499 97.976C292.067 96.8667 290.19 95.3093 288.867 93.304C287.544 91.2987 286.883 88.9307 286.883 86.2H296.483C296.483 87.7787 297.08 89.0373 298.275 89.976C299.512 90.872 301.176 91.32 303.267 91.32C305.272 91.32 306.83 90.872 307.939 89.976C309.091 89.08 309.667 87.8427 309.667 86.264C309.667 84.8987 309.24 83.7253 308.387 82.744C307.534 81.7627 306.339 81.1013 304.803 80.76L300.067 79.672C296.099 78.7333 293.006 77.0053 290.787 74.488C288.611 71.928 287.523 68.8133 287.523 65.144C287.523 62.4133 288.142 60.0453 289.379 58.04C290.659 55.992 292.451 54.4133 294.755 53.304C297.059 52.1947 299.79 51.64 302.947 51.64C307.726 51.64 311.502 52.8347 314.275 55.224C317.091 57.5707 318.499 60.7493 318.499 64.76H308.899C308.899 63.2667 308.366 62.0933 307.299 61.24C306.275 60.3867 304.782 59.96 302.819 59.96C300.984 59.96 299.576 60.3867 298.595 61.24C297.614 62.0507 297.123 63.224 297.123 64.76C297.123 66.1253 297.507 67.2987 298.275 68.28C299.086 69.2187 300.216 69.8587 301.667 70.2L306.659 71.352C310.798 72.2907 313.934 73.9973 316.067 76.472C318.2 78.904 319.267 82.0187 319.267 85.816C319.267 88.5467 318.584 90.9573 317.219 93.048C315.896 95.1387 314.019 96.76 311.587 97.912C309.198 99.064 306.36 99.64 303.075 99.64Z" fill="${
                    brick.decorator1
                }"/>
                <text xml:space="preserve" style="white-space: pre" font-family="JetBrains Mono, ui-monospace, 'Cascadia Code', 'Source Code Pro', Menlo, Consolas, 'DejaVu Sans Mono', monospace" font-size="36" font-weight="400" letter-spacing="6px" text-anchor="end" x="954" y="953.5" fill="${
                    brick.decorator1
                }">${this.brickCount.toString().trim()}</text>
                ${rectsSvg}
            </svg>
        `.trim();
    }

    async drawCanvas(latestBrick: Fragment, context: Context): Promise<void> {
        this.brickCount++;
        const { Fragment, Checkpoint } = context.db;

        const cp = await Checkpoint.create({
            id: '1_' + this.brickCount.toString().padStart(7, '0'),
            data: {
                itemCount: this.brickCount,
                canvasId: latestBrick.canvasId,
                fragmentId: latestBrick.id,
                assetsGenerated: true,
            },
        });
        await Fragment.update({
            id: latestBrick.id,
            data: ({ current }) => ({
                ...current,
                checkpointId: cp.id,
            }),
        });
        const bricksvg = this.drawBrickSVG(latestBrick);
        // example, placing first brick in the middle
        const brickShape = BrickShape[latestBrick.decorator2 as keyof typeof BrickShape];
        const brickPoints = BrickShapePoints[brickShape];
        if (this.brickCount == 1) {
            //this.grid.placeBrick(-1, -1, BrickShape[latestBrick.decorator2 as keyof typeof BrickShape], latestBrick.decorator1);
            this.grid.placeFirstBrick(brickPoints, latestBrick.decorator1);
        } else {
            this.grid.findBestPlacementForBrick(brickPoints, latestBrick.decorator1);
        }

        //this.grid.findBestPlacementForBrick(brickPoints, latestBrick.decorator1);

        // draw canvas svg
        const [top, right, bottom, left] = this.grid.getBounds();
        const extentX = Math.abs(left - right) + this.outerPadding * 2;
        const extentY = Math.abs(top - bottom) + this.outerPadding * 2;
        const spanSize = Math.max(extentX, extentY) + 1;
        const offsetX = Math.floor((spanSize - extentX) / 2);
        const offsetY = Math.floor((spanSize - extentY) / 2);

        const startXCell = left - this.outerPadding - offsetX;
        const startYCell = top - this.outerPadding - offsetY;
        const startXPos = startXCell * this.cellSize;
        const startYPos = startYCell * this.cellSize;
        const size = spanSize * this.cellSize;

        const cells = [];
        for (let x = startXCell; x <= startXCell + spanSize; x++) {
            for (let y = startYCell; y <= startYCell + spanSize; y++) {
                const svgX = x * this.cellSize;
                const svgY = y * this.cellSize;
                const key = this.grid.key(x, y);
                const cell = this.grid.cells.get(key);
                if (!cell || cell.color === null) {
                    cells.push(
                        `<rect x="${svgX}" y="${svgY}" width="${this.cellSize}" height="${this.cellSize}" rx="4" fill="#020617" stroke="#020617" stroke-width="2" />`,
                    );
                } else if (cell.color !== null) {
                    cells.push(
                        `<rect x="${svgX}" y="${svgY}" width="${this.cellSize}" height="${this.cellSize}" rx="4" fill="${cell.color}" stroke="#020617" stroke-width="2" />`,
                    );
                }
            }
        }
        /*for (const [key, cell] of this.grid.cells) {
            const [x, y] = this.grid.keyToCoords(key);
            const svgX = x * this.cellSize;
            const svgY = y * this.cellSize;

            if (cell.color !== null) {
                // filled cells
                cells.push(
                    `<rect x="${svgX}" y="${svgY}" width="${this.cellSize}" height="${this.cellSize}" fill="${cell.color}" rx="4" stroke="#080A0F" stroke-width="2.5" />`,
                );
            }
        }*/

        const gridsvg = `
            <svg xmlns="http://www.w3.org/2000/svg"
                width="${size}"
                height="${size}" 
                viewBox="${startXPos} ${startYPos} ${size} ${size}">
                <rect x="${startXPos}" y="${startYPos}" width="${size}" height="${size}" fill="#080A0F" />
                ${cells.join('\n')} 
            </svg>
        `.trim();

        await writeFile(pathsService.pathToCheckpointImage(1, this.brickCount), gridsvg);
        await writeFile(pathsService.pathToCanvasImage(1), gridsvg);
        await writeFile(pathsService.pathToBrickImage(latestBrick.tokenId), bricksvg);
        metadataService.generateBrickMetadata(latestBrick);
        metadataService.generateCanvasMetadata(1n, this.brickCount, latestBrick);
    }
}
